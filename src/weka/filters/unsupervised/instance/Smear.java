package weka.filters.unsupervised.instance;

import weka.core.Attribute;
import weka.core.Instances;
import weka.core.OptionMetadata;
import weka.core.Randomizable;
import weka.filters.SimpleBatchFilter;

import java.util.ArrayList;

public class Smear extends SimpleBatchFilter implements Randomizable {
    /**
     * Seed for random number generation.
     */
    protected int m_seed = 0;

    /**
     * Standard deviation to use for the normal distribution.
     */
    protected double m_stdDev = 0.5;

    /**
     * Number of instances in new training set relative to number of instances in input training set.
     */
    protected double m_numSamples = 1;

    /**
     * The method used to establish the format of the data generated by this filter, as an Instances object.
     *
     * @param instances the input dataset, with a string attribute containing the file names of the images
     * @return an Instances object that provides the "header" information for the data generated by this filter
     * (i.e., an Instances object that does not contain any actual instances but does contain a list of attributes).
     */
    @Override
    protected Instances determineOutputFormat(Instances instances) {
        // create attribute list
        ArrayList<Attribute> attributes = new ArrayList<>(instances.numAttributes());
        // copy attributes from input
        for (int i = 0; i < instances.numAttributes(); i++) {
            attributes.add(instances.attribute(i));
        }

        // create and return output
        Instances output = new Instances("features", attributes, 0);
        output.setClassIndex(output.numAttributes() - 1);
        return output;
    }

    /**
     * The method that processes the given dataset and outputs the filtered data.
     *
     * @param instances the input data to be filtered, with a string attribute containing the file names of the images
     * @return the filtered data, consisting of feature vectors ready for other machine learning algorithms
     */
    @Override
    protected Instances process(Instances instances) {
        return null;
    }

    @Override
    public String globalInfo() {
        return "This filter randomizes training data using the smear method.";
    }

    @OptionMetadata(
            displayName = "Seed for random number generation",
            description = "The seed value used by the random number generator.",
            displayOrder = 1,
            commandLineParamName = "S",
            commandLineParamSynopsis = "-S")
    @Override
    public int getSeed() {
        return m_seed;
    }

    @Override
    public void setSeed(int seed) {
        m_seed = seed;
    }

    @OptionMetadata(
            displayName = "Standard deviation to use for the normal distribution.",
            description = "The standard deviation to use for the normal distribution.",
            displayOrder = 2,
            commandLineParamName = "stdDev",
            commandLineParamSynopsis = "-stdDev")
    public double getStdDev() {
        return m_stdDev;
    }

    public void setStdDev(double stdDev) {
        m_stdDev = stdDev;
    }

    @OptionMetadata(
            displayName = "Number of instances in new training set relative to number of instances in input training set.",
            description = "The number of instances in new training set relative to number of instances in input training set.",
            displayOrder = 3,
            commandLineParamName = "numSamples",
            commandLineParamSynopsis = "-numSamples")
    public double getNumSamples() {
        return m_numSamples;
    }

    public void setNumSamples(double numSamples) {
        m_numSamples = numSamples;
    }

    public static void main(String[] args) {
        runFilter(new Mixup(), args);
    }
}
