package weka.filters.unsupervised.instance;

import weka.core.*;
import weka.filters.SimpleBatchFilter;

import java.util.ArrayList;
import java.util.Random;

public class Mixup extends SimpleBatchFilter implements Randomizable {
    /**
     * Seed for random number generation.
     */
    protected int m_seed = 0;

    /**
     * Alpha value to use for beta distribution sample, Beta(alpha, alpha).
     */
    protected double m_alpha = 0.5;

    /**
     * Number of instances in new training set relative to number of instances in input training set.
     */
    protected double m_numSamples = 1;

    /**
     * The method used to establish the format of the data generated by this filter, as an Instances object.
     *
     * @param instances the input dataset, with a string attribute containing the file names of the images
     * @return an Instances object that provides the "header" information for the data generated by this filter
     * (i.e., an Instances object that does not contain any actual instances but does contain a list of attributes).
     */
    @Override
    protected Instances determineOutputFormat(Instances instances) {
        // create attribute list
        ArrayList<Attribute> attributes = new ArrayList<>(instances.numAttributes());
        // copy attributes from input
        for (int i = 0; i < instances.numAttributes(); i++) {
            attributes.add(instances.attribute(i));
        }

        // create and return output
        Instances output = new Instances("features", attributes, 0);
        output.setClassIndex(output.numAttributes() - 1);
        return output;
    }

    /**
     * The method that processes the given dataset and outputs the filtered data.
     *
     * @param instances the input data to be filtered, with a string attribute containing the file names of the images
     * @return the filtered data, consisting of feature vectors ready for other machine learning algorithms
     */
    @Override
    protected Instances process(Instances instances) {
        // return the instances if not training instances
        if (isFirstBatchDone())
            return instances;

        Random rnd = new Random(m_seed);
        int numInput = instances.numInstances();
        int numOutput = (int) (numInput * m_numSamples);
        Instances output = getOutputFormat();

        RandomInstanceSampler sampler = new RandomInstanceSampler(instances, rnd);
        // for number of expected outputs
        for (int i = 0; i < numOutput; i++) {
            // create feature array
            double[] features1 = new double[output.numAttributes()];
            double[] features2 = new double[output.numAttributes()];

            double[][] sample1And2 = sampler.getRandomInstances();
            double[] sample1 = sample1And2[0];
            double[] sample2 = sample1And2[1];
            double weight = sampleBetaDistribution(m_alpha, rnd);

            // combine features
            for (int j = 0; j < output.numAttributes(); j++) {
                // skip class index
                if (j == output.classIndex())
                    continue;

                // weighted average of samples
                features1[j] = sample1[j] * weight + sample2[j] * (1 - weight);
                features2[j] = features1[j];
            }

            // add features to output with weighting
            features1[output.classIndex()] = sample1[output.classIndex()];
            output.add(new DenseInstance(weight, features1));
            features2[output.classIndex()] = sample2[output.classIndex()];
            output.add(new DenseInstance(1 - weight, features2));
        }

        return output;
    }

    /**
     * Randomly sample a beta distribution with bot parameters as <code>alpha</code>.<br>
     * Source: R. C. H. Cheng. 1978. Generating beta variates with nonintegral shape parameters. Commun. ACM 21, 4 (April 1978), 317â€“322. DOI:https://doi.org/10.1145/359460.359482
     *
     * @param alpha alpha parameter for beta distribution, must be >0 and <=1
     * @param rnd   random object to use
     * @return a value samples from a beta distribution
     */
    protected static double sampleBetaDistribution(double alpha, Random rnd) {
        double a = alpha + alpha;
        double b;
        if (alpha < 1)
            b = 1 / alpha;
        else
            b = Math.sqrt((a - 2) / (2 * alpha * alpha - a));
        double c = alpha + 1 / b;

        double u1;
        double u2;
        double w;
        double v;
        while (true) {
            u1 = rnd.nextDouble();
            u2 = rnd.nextDouble();
            v = b * Math.log(u1 / (1 - u1));
            w = alpha * Math.exp(v);

            double tmp = Math.log(a / (alpha + w));
            if (a * tmp + (c * v) - 1.3862944 >= Math.log(u1 * u1 * u2))
                break;
        }

        return w / (alpha + w);
    }

    @Override
    public String globalInfo() {
        return "This filter randomizes training data using the mixup method.";
    }

    @OptionMetadata(
            displayName = "Seed for random number generation",
            description = "The seed value used by the random number generator.",
            displayOrder = 1,
            commandLineParamName = "S",
            commandLineParamSynopsis = "-S")
    @Override
    public int getSeed() {
        return m_seed;
    }

    @Override
    public void setSeed(int seed) {
        m_seed = seed;
    }

    @OptionMetadata(
            displayName = "Alpha value to use for beta distribution sample, Beta(alpha, alpha).",
            description = "The alpha value to use for beta distribution sample, Beta(alpha, alpha).",
            displayOrder = 2,
            commandLineParamName = "alpha",
            commandLineParamSynopsis = "-alpha")
    public double getAlpha() {
        return m_alpha;
    }

    public void setAlpha(double alpha) {
        m_alpha = alpha;
    }

    @OptionMetadata(
            displayName = "Number of instances in new training set relative to number of instances in input training set.",
            description = "The number of instances in new training set relative to number of instances in input training set.",
            displayOrder = 3,
            commandLineParamName = "numSamples",
            commandLineParamSynopsis = "-numSamples")
    public double getNumSamples() {
        return m_numSamples;
    }

    public void setNumSamples(double numSamples) {
        m_numSamples = numSamples;
    }

    public static void main(String[] args) {
        runFilter(new Mixup(), args);
    }

    private static class RandomInstanceSampler {
        private final double[][] instances;
        private final Random rnd;
        private int remaining = 0;

        private RandomInstanceSampler(Instances instances, Random rnd) {
            this.instances = new double[instances.numInstances()][];
            for (int i = 0; i < this.instances.length; i++) {
                this.instances[i] = instances.get(i).toDoubleArray();
            }
            this.rnd = rnd;
        }

        private double[][] getRandomInstances() {
            if (remaining <= 1) {
                shuffle();
                remaining = instances.length;
            }

            remaining -= 2;
            return new double[][]{instances[remaining], instances[remaining + 1]};
        }

        private void shuffle() {
            for (int i = instances.length - 1; i > 0; i--) {
                int index = rnd.nextInt(i + 1);
                // Simple swap
                double[] a = instances[index];
                instances[index] = instances[i];
                instances[i] = a;
            }
        }
    }
}
