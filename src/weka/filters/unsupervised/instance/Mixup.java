package weka.filters.unsupervised.instance;

import weka.core.Attribute;
import weka.core.Instances;
import weka.core.OptionMetadata;

import java.util.ArrayList;
import java.util.Random;

public class Mixup extends weka.filters.SimpleBatchFilter implements weka.core.Randomizable {
    /**
     * Seed for random number generation.
     */
    protected int m_seed = 0;

    /**
     * Alpha value to use for beta distribution sample, Beta(alpha, alpha).
     */
    protected double m_alpha = 0.5;

    /**
     * Number of instances in new training set relative to number of instances in input training set.
     */
    protected double m_numSamples = 1;

    /**
     * The method used to establish the format of the data generated by this filter, as an Instances object.
     *
     * @param instances the input dataset, with a string attribute containing the file names of the images
     * @return an Instances object that provides the "header" information for the data generated by this filter
     * (i.e., an Instances object that does not contain any actual instances but does contain a list of attributes).
     */
    @Override
    protected Instances determineOutputFormat(Instances instances) {
        // create attribute list
        ArrayList<Attribute> attributes = new ArrayList<>(instances.numAttributes());
        // copy attributes from input
        for (int i = 0; i < instances.numAttributes(); i++) {
            attributes.add(instances.attribute(i));
        }

        // create and return output
        Instances output = new Instances("features", attributes, 0);
        output.setClassIndex(output.numAttributes() - 1);
        return output;
    }

    /**
     * The method that processes the given dataset and outputs the filtered data.
     *
     * @param instances the input data to be filtered, with a string attribute containing the file names of the images
     * @return the filtered data, consisting of feature vectors ready for other machine learning algorithms
     */
    @Override
    protected Instances process(Instances instances) {
        return null;
    }

    /**
     * Randomly sample a beta distribution with bot parameters as <code>alpha</code>.
     *
     * @param alpha alpha parameter for beta distribution, must be >0 and <=1
     * @param rnd   random object to use
     * @return a value samples from a beta distribution
     */
    protected static double sampleBetaDistribution(double alpha, Random rnd) {
        if (alpha > 1 || alpha <= 0)
            throw new IllegalArgumentException("alpha parameter must be >0 and <=1");

        // make two gamma sample
        double x = sampleGammaDistribution(alpha, rnd);
        double y = sampleGammaDistribution(alpha, rnd);

        // calculate beta
        return x / (x + y);
    }

    /**
     * Randomly sample a gamma distribution with parameter <code>alpha</code>.
     *
     * @param alpha alpha parameter for gamma distribution, must be >0 and <=1
     * @param rnd   random object to use
     * @return a value samples from a gamma distribution
     */
    protected static double sampleGammaDistribution(double alpha, Random rnd) {
        if (alpha > 1 || alpha <= 0)
            throw new IllegalArgumentException("alpha parameter must be >0 and <=1");

        // going to calculate based on alpha + 1 for faster results
        double a = alpha + 1;

        // setup
        double d = a - 1.0 / 3.0;
        double c = 1.0 / Math.sqrt(9 * d);

        // keep generating till something works
        while (true) {
            double x = rnd.nextGaussian();
            double v = Math.pow(1.0 + c * x, 3);
            double uniform = rnd.nextDouble();
            if (v > 0 && Math.log(uniform) < 0.5 * x * x + d - d * v + d * Math.log(v))
                return d * v * Math.pow(rnd.nextDouble(), 1 / alpha);
        }

    }

    @Override
    public String globalInfo() {
        return "This filter randomizes training data using the mixup method.";
    }

    @OptionMetadata(
            displayName = "Seed for random number generation",
            description = "The seed value used by the random number generator.",
            displayOrder = 1,
            commandLineParamName = "S",
            commandLineParamSynopsis = "-S")
    @Override
    public int getSeed() {
        return m_seed;
    }

    @Override
    public void setSeed(int seed) {
        m_seed = seed;
    }

    @OptionMetadata(
            displayName = "Alpha value to use for beta distribution sample, Beta(alpha, alpha).",
            description = "The alpha value to use for beta distribution sample, Beta(alpha, alpha).",
            displayOrder = 2,
            commandLineParamName = "alpha",
            commandLineParamSynopsis = "-alpha")
    public double getAlpha() {
        return m_alpha;
    }

    public void setAlpha(double alpha) {
        m_alpha = alpha;
    }

    @OptionMetadata(
            displayName = "Number of instances in new training set relative to number of instances in input training set.",
            description = "The number of instances in new training set relative to number of instances in input training set.",
            displayOrder = 3,
            commandLineParamName = "numSamples",
            commandLineParamSynopsis = "-numSamples")
    public double getNumSamples() {
        return m_numSamples;
    }

    public void setNumSamples(double numSamples) {
        m_numSamples = numSamples;
    }

    public static void main(String[] args) {
        runFilter(new Mixup(), args);
    }
}
